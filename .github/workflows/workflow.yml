name: CI/CD Pipeline

on:
  push:
    branches:
      - main
    

jobs:
  integration:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all history for accurate code analysis

      - name: Install required tools
        run: |
          dotnet tool install -g dotnet-sonarscanner
          dotnet tool install -g dotnet-reportgenerator-globaltool
          dotnet tool install -g dotnet-stryker

      - name: Start Static Code Analysis
        run: |
          dotnet sonarscanner begin \
          /k:"${{ vars.SONAR_PROJECT }}" \
          /d:sonar.host.url="${{ vars.SONAR_URL }}" \
          /d:sonar.token="${{ secrets.SONAR_TOKEN }}" \
          /d:sonar.coverageReportPaths="coverage-report/SonarQube.xml" \
          /d:sonar.qualitygate.wait=true \
          /d:sonar.qualitygate.timeout=300 \
          /d:sonar.exclusions=frontend/**
          
      - name: Debug Filesystem
        run: ls -R  # debbuging step for meeeeee

      - name: Build
        run: dotnet build

      - name: Run unit tests and collect code coverage
        run: dotnet test --collect:"XPlat Code Coverage" --results-directory ./TestResults --logger "trx;LogFileName=test_results.trx"

      - name: List files in TestResults folder
        run: ls -R ./TestResults  # Debugging step for me

      - name: Generate report
        run: |
          reportgenerator \
          -reports:TestResults/**/coverage.cobertura.xml \
          -targetdir:coverage-report \
          -reporttypes:SonarQube

      - name: Run Mutation Tests (Stryker)
        run: dotnet stryker --break-at 80 --output ./TestResults/StrykerOutput

      - name: Complete Static Code Analysis
        run: |
          dotnet sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"

      - name: Upload Stryker Mutation Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: stryker-report
          path: ./TestResults/StrykerOutput/

  delivery:
    runs-on: ubuntu-latest
    needs: integration # Ensures delivery only runs if integration succeeds
    
    permissions:
      contents: write
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Application Version
        id: semver-app
        uses: paulhatch/semantic-version@v5.4.0
        with:
          bump_each_commit: true

      - name: Log in to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GIT_TOKEN }}

      - name: Build and Push Docker image
        run: |
          docker build \
            -t ghcr.io/${{ github.repository_owner }}/devopscalculator:staging \
            -t ghcr.io/${{ github.repository_owner }}/devopscalculator:${{ steps.semver-app.outputs.version }} \
            -f CalculatorAPI/Dockerfile \.

          docker push ghcr.io/${{ github.repository_owner }}/devopscalculator --all-tags
      
      - name: Create release notes
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ steps.semver-app.outputs.version }}
          generateReleaseNotes: true
          body: |

      - name: Deliver Docker Compose file to staging
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ vars.STAGING_SERVER_IP }}
          username: ${{ vars.STAGING_SERVER_USERNAME }}
          key: ${{ secrets.STAGING_SERVER_SSH_KEY }}
          source: "docker-compose.yaml,db/migrations/**/*.*"
          target: dowa/


      - name: Run Docker Compose on staging server
        uses: appleboy/ssh-action@v1.2.1
        with:
          host: ${{ vars.STAGING_SERVER_IP }}
          username: ${{ vars.STAGING_SERVER_USERNAME }}
          key: ${{ secrets.STAGING_SERVER_SSH_KEY }}
          script: |
            export DATABASE_ROOT_PASSWORD="${{ secrets.DATABASE_ROOT_PASSWORD }}"
            export DATABASE_NAME="${{ vars.DATABASE_NAME }}"
            export DATABASE_USER="${{ vars.DATABASE_USER }}"
            export DATABASE_PASSWORD="${{ secrets.DATABASE_PASSWORD }}"
            cd dowa
            docker compose pull
            docker compose up -d mariadb
            sleep 10
            docker compose up flyway --exit-code-from flyway
            docker compose up -d
